{"version":3,"file":"popup.bundle.js","mappings":";;;;AAAA;;AAEA;AACA,IAAMA,kBAAkB,GAAGC,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC;AAClE,IAAMC,iBAAiB,GAAGF,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC;AAChE,IAAME,gBAAgB,GAAGH,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;AAC9D,IAAMG,cAAc,GAAGJ,QAAQ,CAACC,cAAc,CAAC,gBAAgB,CAAC;;AAEhE;AACAF,kBAAkB,CAACM,gBAAgB,CAAC,OAAO,EAAE,YAAM;EAC/CC,MAAM,CAACC,OAAO,CAACC,WAAW,CAAC;IAAEC,MAAM,EAAE;EAAiB,CAAC,EAAE,UAAAC,QAAQ,EAAI;IACjEC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,MAAM,KAAK,SAAS,GAAG,mBAAmB,GAAG,2BAA2B,CAAC;EAClG,CAAC,CAAC;AACN,CAAC,CAAC;;AAEF;AACAX,iBAAiB,CAACG,gBAAgB,CAAC,OAAO,EAAE,YAAM;EAC9CC,MAAM,CAACC,OAAO,CAACC,WAAW,CAAC;IAAEC,MAAM,EAAE;EAAgB,CAAC,EAAE,UAAAC,QAAQ,EAAI;IAChEC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,MAAM,KAAK,SAAS,GAAG,mBAAmB,GAAG,0BAA0B,CAAC;EACjG,CAAC,CAAC;AACN,CAAC,CAAC;;AAEF;AACAV,gBAAgB,CAACE,gBAAgB,CAAC,OAAO,EAAE,YAAM;EAC7CC,MAAM,CAACC,OAAO,CAACC,WAAW,CAAC;IAAEC,MAAM,EAAE;EAAa,CAAC,EAAE,UAAAC,QAAQ,EAAI;IAC7D,IAAIA,QAAQ,CAACG,MAAM,KAAK,SAAS,EAAE;MAC/BT,cAAc,CAACU,SAAS,GAAG,EAAE,CAAC,CAAC;MAC/BH,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAChC;EACJ,CAAC,CAAC;AACN,CAAC,CAAC;;AAEF;AACAN,MAAM,CAACC,OAAO,CAACC,WAAW,CAAC;EAAEC,MAAM,EAAE;AAAW,CAAC,EAAE,UAAAC,QAAQ,EAAI;EAC3D,IAAMK,KAAK,GAAGL,QAAQ,CAACK,KAAK,IAAI,EAAE;EAClCC,YAAY,CAACD,KAAK,CAAC;AACvB,CAAC,CAAC;;AAEF;AACA,SAASC,YAAYA,CAACD,KAAK,EAAE;EACzBX,cAAc,CAACU,SAAS,GAAG,EAAE,CAAC,CAAC;EAC/BC,KAAK,CAACE,OAAO,CAAC,UAAAC,IAAI,EAAI;IAClB,IAAMC,WAAW,GAAGnB,QAAQ,CAACoB,aAAa,CAAC,KAAK,CAAC;IACjDD,WAAW,CAACE,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;IACjCH,WAAW,CAACI,WAAW,OAAAC,MAAA,CAAO,IAAIC,IAAI,CAACP,IAAI,CAACQ,SAAS,CAAC,CAACC,kBAAkB,CAAC,CAAC,QAAAH,MAAA,CAAKN,IAAI,CAACU,IAAI,CAAE;IAC3FxB,cAAc,CAACyB,WAAW,CAACV,WAAW,CAAC;EAC3C,CAAC,CAAC;AACN,C","sources":["webpack://smart-meet-notes/./src/popup/popup.js"],"sourcesContent":["// src/popup/popup.js\r\n\r\n// Button references\r\nconst startCaptureButton = document.getElementById('startCapture');\r\nconst stopCaptureButton = document.getElementById('stopCapture');\r\nconst clearNotesButton = document.getElementById('clearNotes');\r\nconst notesContainer = document.getElementById('notesContainer');\r\n\r\n// Start capturing captions\r\nstartCaptureButton.addEventListener('click', () => {\r\n    chrome.runtime.sendMessage({ action: 'startCapturing' }, response => {\r\n        console.log(response.status === 'started' ? 'Capturing started' : 'Failed to start capturing');\r\n    });\r\n});\r\n\r\n// Stop capturing captions\r\nstopCaptureButton.addEventListener('click', () => {\r\n    chrome.runtime.sendMessage({ action: 'stopCapturing' }, response => {\r\n        console.log(response.status === 'stopped' ? 'Capturing stopped' : 'Failed to stop capturing');\r\n    });\r\n});\r\n\r\n// Clear all captured notes\r\nclearNotesButton.addEventListener('click', () => {\r\n    chrome.runtime.sendMessage({ action: 'clearNotes' }, response => {\r\n        if (response.status === 'cleared') {\r\n            notesContainer.innerHTML = ''; // Clear notes display\r\n            console.log('Notes cleared');\r\n        }\r\n    });\r\n});\r\n\r\n// Fetch and display notes when popup opens\r\nchrome.runtime.sendMessage({ action: 'getNotes' }, response => {\r\n    const notes = response.notes || [];\r\n    displayNotes(notes);\r\n});\r\n\r\n// Display notes in the popup\r\nfunction displayNotes(notes) {\r\n    notesContainer.innerHTML = ''; // Clear current notes\r\n    notes.forEach(note => {\r\n        const noteElement = document.createElement('div');\r\n        noteElement.classList.add('note');\r\n        noteElement.textContent = `[${new Date(note.timestamp).toLocaleTimeString()}] ${note.text}`;\r\n        notesContainer.appendChild(noteElement);\r\n    });\r\n}\r\n"],"names":["startCaptureButton","document","getElementById","stopCaptureButton","clearNotesButton","notesContainer","addEventListener","chrome","runtime","sendMessage","action","response","console","log","status","innerHTML","notes","displayNotes","forEach","note","noteElement","createElement","classList","add","textContent","concat","Date","timestamp","toLocaleTimeString","text","appendChild"],"sourceRoot":""}