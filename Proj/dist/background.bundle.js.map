{"version":3,"file":"background.bundle.js","mappings":";;;;AAAA;;AAEAA,MAAM,CAACC,OAAO,CAACC,WAAW,CAACC,WAAW,CAAC,YAAM;EACzCC,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;AACnE,CAAC,CAAC;;AAEF;AACAL,MAAM,CAACC,OAAO,CAACK,SAAS,CAACH,WAAW,CAAC,UAACI,OAAO,EAAEC,MAAM,EAAEC,YAAY,EAAK;EACpE,IAAIF,OAAO,CAACG,MAAM,KAAK,gBAAgB,EAAE;IACrCV,MAAM,CAACW,IAAI,CAACC,KAAK,CAAC;MAAEC,MAAM,EAAE,IAAI;MAAEC,aAAa,EAAE;IAAK,CAAC,EAAE,UAACH,IAAI,EAAK;MAC/DX,MAAM,CAACW,IAAI,CAACI,WAAW,CAACJ,IAAI,CAAC,CAAC,CAAC,CAACK,EAAE,EAAE;QAAEN,MAAM,EAAE;MAAiB,CAAC,EAAE,UAAAO,QAAQ,EAAI;QAC1ER,YAAY,CAACQ,QAAQ,CAAC;MAC1B,CAAC,CAAC;IACN,CAAC,CAAC;IACF,OAAO,IAAI,CAAC,CAAC;EACjB,CAAC,MAAM,IAAIV,OAAO,CAACG,MAAM,KAAK,eAAe,EAAE;IAC3CV,MAAM,CAACW,IAAI,CAACC,KAAK,CAAC;MAAEC,MAAM,EAAE,IAAI;MAAEC,aAAa,EAAE;IAAK,CAAC,EAAE,UAACH,IAAI,EAAK;MAC/DX,MAAM,CAACW,IAAI,CAACI,WAAW,CAACJ,IAAI,CAAC,CAAC,CAAC,CAACK,EAAE,EAAE;QAAEN,MAAM,EAAE;MAAgB,CAAC,EAAE,UAAAO,QAAQ,EAAI;QACzER,YAAY,CAACQ,QAAQ,CAAC;MAC1B,CAAC,CAAC;IACN,CAAC,CAAC;IACF,OAAO,IAAI;EACf,CAAC,MAAM,IAAIV,OAAO,CAACG,MAAM,KAAK,UAAU,EAAE;IACtCV,MAAM,CAACW,IAAI,CAACC,KAAK,CAAC;MAAEC,MAAM,EAAE,IAAI;MAAEC,aAAa,EAAE;IAAK,CAAC,EAAE,UAACH,IAAI,EAAK;MAC/DX,MAAM,CAACW,IAAI,CAACI,WAAW,CAACJ,IAAI,CAAC,CAAC,CAAC,CAACK,EAAE,EAAE;QAAEN,MAAM,EAAE;MAAW,CAAC,EAAE,UAAAO,QAAQ,EAAI;QACpER,YAAY,CAACQ,QAAQ,CAAC;MAC1B,CAAC,CAAC;IACN,CAAC,CAAC;IACF,OAAO,IAAI;EACf,CAAC,MAAM,IAAIV,OAAO,CAACG,MAAM,KAAK,YAAY,EAAE;IACxCV,MAAM,CAACW,IAAI,CAACC,KAAK,CAAC;MAAEC,MAAM,EAAE,IAAI;MAAEC,aAAa,EAAE;IAAK,CAAC,EAAE,UAACH,IAAI,EAAK;MAC/DX,MAAM,CAACW,IAAI,CAACI,WAAW,CAACJ,IAAI,CAAC,CAAC,CAAC,CAACK,EAAE,EAAE;QAAEN,MAAM,EAAE;MAAa,CAAC,EAAE,UAAAO,QAAQ,EAAI;QACtER,YAAY,CAACQ,QAAQ,CAAC;MAC1B,CAAC,CAAC;IACN,CAAC,CAAC;IACF,OAAO,IAAI;EACf;AACJ,CAAC,CAAC,C","sources":["webpack://smart-meet-notes/./src/background/background.js"],"sourcesContent":["// src/background/background.js\r\n\r\nchrome.runtime.onInstalled.addListener(() => {\r\n    console.log(\"Smart Meet Notes: Extension installed and ready.\");\r\n});\r\n\r\n// Action handlers for messages from popup and content scripts\r\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\r\n    if (request.action === 'startCapturing') {\r\n        chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\r\n            chrome.tabs.sendMessage(tabs[0].id, { action: 'startCapturing' }, response => {\r\n                sendResponse(response);\r\n            });\r\n        });\r\n        return true; // Keep the message channel open for async response\r\n    } else if (request.action === 'stopCapturing') {\r\n        chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\r\n            chrome.tabs.sendMessage(tabs[0].id, { action: 'stopCapturing' }, response => {\r\n                sendResponse(response);\r\n            });\r\n        });\r\n        return true;\r\n    } else if (request.action === 'getNotes') {\r\n        chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\r\n            chrome.tabs.sendMessage(tabs[0].id, { action: 'getNotes' }, response => {\r\n                sendResponse(response);\r\n            });\r\n        });\r\n        return true;\r\n    } else if (request.action === 'clearNotes') {\r\n        chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\r\n            chrome.tabs.sendMessage(tabs[0].id, { action: 'clearNotes' }, response => {\r\n                sendResponse(response);\r\n            });\r\n        });\r\n        return true;\r\n    }\r\n});\r\n"],"names":["chrome","runtime","onInstalled","addListener","console","log","onMessage","request","sender","sendResponse","action","tabs","query","active","currentWindow","sendMessage","id","response"],"sourceRoot":""}